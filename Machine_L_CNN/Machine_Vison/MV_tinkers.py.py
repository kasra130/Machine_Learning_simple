# -*- coding: utf-8 -*-
"""Khoafollowingex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryeBe1mKRrbJ2v6ijj2hQ4Z4NEI806_k
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

wolf1 = cv.imread('wolf.jpeg', cv.IMREAD_GRAYSCALE)
plt.imshow(wolf1 , cmap='gray')

wolf2 = cv.imread('wolf2.jpg', cv.IMREAD_GRAYSCALE)
plt.imshow(wolf2 , cmap='gray')
wolf2_resize= wolf22 =  cv.resize(wolf2, wolf1.shape)
plt.imshow(wolf2_resize, cmap='gray')

wolf1filter = cv.GaussianBlur(wolf1,(3,3), 4)   #lowpass filter
plt.imshow(wolf2_resize, cmap='gray')

wolf1highpass = wolf1 - wolf1filter 
plt.imshow(wolf1highpass , cmap='gray')

wolf2filter = cv.GaussianBlur(wolf2,(3,3), 13)
wolf2highpass = wolf2 - wolf2filter 
plt.imshow(wolf2highpass , cmap='gray')

plt.imshow(wolf1highpass + wolf2filter , cmap='gray')

# import the necessary packages

# construct the argument parse and parse the arguments

# load the image, convert it to grayscale, blur it slightly,
# and threshold it

import argparse
import imutils
import cv2

image = cv2.imread("shapes_and_colors.jpg")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
thresh = cv2.threshold(blurred, 60, 255, cv2.THRESH_BINARY)[1]

# find contours in the thresholded image
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
	cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)

for c in cnts:
	# compute the center of the contour
	M = cv2.moments(c)
	cX = int(M["m10"] / M["m00"])
	cY = int(M["m01"] / M["m00"])
	# draw the contour and center of the shape on the image
	cv2.drawContours(image, [c], -1, (0, 255, 0), 2)
	cv2.circle(image, (cX, cY), 7, (255, 255, 255), -1)
	cv2.putText(image, "center", (cX - 20, cY - 20),
		cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
	# show the image
	cv2.imshow("shapes_and_colors", image)
	cv2.waitKey(0)