# -*- coding: utf-8 -*-
"""EX2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LYfNXQBpX-SdOwbnnzVb8cAmeDD-1z9Y

Trying out a gray scale into otsu threshholding with applied erotion and dilation
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np
import imutils
import math

from matplotlib.offsetbox import AnchoredText

"""
This method, I will try to apply thresholding method and utilize the relative diameter to detect the type of coin. 4
The steps will :


1.   import image
2.   gray scale
3.   filter
4.   threshold
5.   detect edges and circle around
6.   count the number of coins
7.   detect and measure diameter
8.   Define which diameter belongs to what type of euro coin
9.   loop 




"""

image = cv2.imread("e.jpg")  #importing picture 
image_blur = cv2.medianBlur(image,25)  #apply blur
gray = cv2.cvtColor(image_blur, cv2.COLOR_BGR2GRAY) #gray scale
val ,thresh = cv2.threshold(gray,240,255,cv2.THRESH_BINARY_INV) #taking threshold
kernel = np.ones((1,1),np.uint8)                  #matrix
opening = cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel) #applying matrix
dist_transform = cv2.distanceTransform(opening,cv2.DIST_L2,5)
ret, prev_image =  cv2.threshold(dist_transform, 0.3*dist_transform.max(),255,0)
prev_image = np.uint8(prev_image)    #converting array type to float32 then back tp
cnts = cv2.findContours(prev_image.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE) #defining contours
cnts = imutils.grab_contours(cnts)                                                    #implimenting
def show(img,count,cmap="gray"):                  #creating function to so that it can be applied to other images
    f_image = cv2.imread("e.jpg")
    f, axs = plt.subplots(1,2,figsize=(14,7))
    axs[0].imshow(f_image,cmap="gray")
    axs[1].imshow(img,cmap="gray")
    axs[1].set_title("Total Money Count = {}".format(count))

for (i, c) in enumerate(cnts):          #counting number of circles 
	((x, y), _) = cv2.minEnclosingCircle(c)
	cv2.putText(image, "{}".format(i + 1), (int(x) - 45, int(y)+20), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 5)
	cv2.drawContours(image, [c], -1, (0, 255, 0), 2)

for (x, y ,r) in detected_circles[0, :]:              #finding the center with respect to outer circle
  cv2.circle(image, (x, y), r, (0, 0, 0), 3)        #outer
  cv2.circle(image, (x, y), 2, (0, 255, 255), 3)    #center
  cv2.line(image,(x-r,y),(x+r, y),(255,0,0),3)
  dist = math.sqrt(((x-r)*(x+r))+(y*y))
  radius=dist/2
  cv2.putText(apply,str(radius),(x-20,y-20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2) 


show(apply,len(cnts))